@page "/chatGroup/{groupName}"
@inherits ChatGroupBase

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <BSAlert Color="Color.Danger">
        @ErrorMessage
    </BSAlert>
}

@if (!RetrievingData)
{
    <!-- Content wrapper start -->
    <div class="content-wrapper" @onmousedown="(() => ReadMessages(Conversation.Id))">

        <!-- Row start -->
        <div class="row gutters">

            <div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">

                <div class="card m-0">

                    <!-- Row start -->
                    <div class="row no-gutters">
                        <div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">
                            <div class="row selected-user">
                                <div class="col">
                                    @if (EditingGroupName)
                                    {
                                        <span><span><input type="text" class="form-control" style="display:unset; width:unset; margin: 15px 15px 15px 0px;" @bind="@GroupName" @bind:event="oninput" /></span><i  @onclick="@(async () => { if (!string.IsNullOrWhiteSpace(GroupName)) await UpdateGroupNameAsync(); })" style="cursor:pointer;" class="fas fa-check"></i></span>
                                    }
                                    else
                                    {
                                        <span>To: <span class="name">@GroupName</span><i @onclick="(() => EditingGroupName = !EditingGroupName)" style="margin-left: 5px; cursor:pointer;" class="fas fa-pencil-alt"></i></span>
                                    }
                                </div>
                                @if (Conversation.CreatedByUserId == MyUserId)
                                {
                                    <div class="col" style="text-align:end;">
                                        <span><i @onclick="(() => AddGamerPopUpModal.Show())" style="cursor: pointer; font-size: 1.25rem;" class="fas fa-user-plus"></i></span>
                                    </div>
                                }
                            </div>
                            <div id="chatContainer" class="chat-container">
                                <ul class="chat-box chatContainerScroll">
                                    @foreach (var message in Messages.OrderBy(message => message.DateSubmitted))
                                    {
                                        if (message.FromUserId == MyUserId)
                                        {
                                            <li class="chat-right">
                                                <div class="chat-hour">@message.DateSubmitted.ToString("MM/dd/yy HH:mm")</div>
                                                <div class="chat-text">
                                                    @message.MessageText
                                                </div>
                                                <div class="chat-avatar">
                                                    <img src="user-icon-256.png">
                                                    <div class="chat-name">@MyUserProfileDto.FirstName</div>
                                                </div>
                                            </li>
                                        }
                                        else
                                        {
                                            <li class="chat-left">
                                                <div class="chat-avatar">
                                                    <img src="user-icon-256.png">
                                                    <div class="chat-name">@message.FromUser.FirstName</div>
                                                </div>
                                                <div class="chat-text">
                                                    @message.MessageText
                                                </div>
                                                <div class="chat-hour">@message.DateSubmitted.ToString("MM/dd/yy HH:mm")</div>
                                            </li>
                                        }
                                    }
                                </ul>
                            </div>
                            <div style="margin:15px;" class="form-group mt-3">
                                <input type="text" class="form-control" @bind="@Message" @bind:event="oninput" @onchange="@(async () => { if (!string.IsNullOrWhiteSpace(Message)) await SendGroupMessageAsync(); })" placeholder="Type your message here..." />
                            </div>
                        </div>
                    </div>
                    <!-- Row end -->
                </div>

            </div>

        </div>
        <!-- Row end -->

    </div>
    <!-- Content wrapper end -->
}
else 
{
    <div class="loading-bar"></div>
}

<BSModal @ref="AddGamerPopUpModal" IsScrollable="true" IgnoreEscape="true" IgnoreClickOnBackdrop="true" Size="Size.Large" ShowEvent="@RefreshModalData">
    <BSModalHeader OnClick="@(() => AddGamerPopUpModal.Hide())">Add Gamer(s)</BSModalHeader>
    <BSModalBody><AddGamerPopUp @ref="AddGamerPageForModal" /></BSModalBody>
    <BSModalFooter>
        <BSButton Color="Color.Primary" @onclick="@(() => AddGamersToChatGroup())">Add Gamer(s) to Chat</BSButton>
        <BSButton Color="Color.Secondary" @onclick="@(() => AddGamerPopUpModal.Hide())">Close</BSButton>
    </BSModalFooter>
</BSModal>

<style>
    .btn-rounded {
        border-radius: 2em;
    }
</style>